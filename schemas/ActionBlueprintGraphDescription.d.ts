/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ActionBlueprintGraphDescription {
  /**
   * A URL to the JSON Schema for this object.
   */
  $schema?: string;
  /**
   * Unique identifier for the action blueprint
   */
  blueprint_id: string;
  /**
   * The name of the action blueprint
   */
  blueprint_name: string;
  /**
   * List of branches (decision points) in this action blueprint
   */
  branches: ActionBranchDescription[] | null;
  edges: ActionBlueprintGraphEdgeDescription[] | null;
  /**
   * List of forms associated with this action blueprint
   */
  forms: ActionFormDescription[] | null;
  nodes: ActionBlueprintGraphNodeDescription[] | null;
  /**
   * The order of data promotion for the action blueprint
   */
  promoted_data_order?: string[] | null;
  /**
   * The status of the blueprint version
   */
  status: "draft" | "published" | "historical" | "archived";
  /**
   * Identifier of the tenant this blueprint belongs to
   */
  tenant_id: string;
  /**
   * List of trigger endpoints associated with this action blueprint
   */
  triggers: TriggerEndpointDescription[] | null;
  /**
   * Unique identifier for the action blueprint version
   */
  version_id: string;
  /**
   * The version notes of the blueprint
   */
  version_notes: string;
  /**
   * The version number of the blueprint
   */
  version_number: string;
}
export interface ActionBranchDescription {
  /**
   * A URL to the JSON Schema for this object.
   */
  $schema?: string;
  /**
   * The condition that must be met for this branch to be taken
   */
  condition: {
    [k: string]: unknown;
  };
  /**
   * The date/time the branch was created
   */
  created_at: string;
  /**
   * The responsible for creating the branch
   */
  created_by: string;
  /**
   * Detailed description of the branch
   */
  description: string;
  /**
   * Unique identifier for the branch
   */
  id: string;
  /**
   * Human-readable name of the branch
   */
  name: string;
  /**
   * Identifier of the tenant this branch belongs to
   */
  tenant_id: string;
  /**
   * The last time the branch was updated
   */
  updated_at: string;
}
export interface ActionBlueprintGraphEdgeDescription {
  /**
   * The source node ID (The id in this case is the component key)
   */
  source: string;
  /**
   * The target node ID (The id in this case is the component key)
   */
  target: string;
}
export interface ActionFormDescription {
  /**
   * A URL to the JSON Schema for this object.
   */
  $schema?: string;
  /**
   * The date and time the form was created
   */
  created_at: string;
  /**
   * The email of the user who created the form
   */
  created_by: string;
  /**
   * Custom javascript to run on the form
   */
  custom_javascript?: string;
  /**
   * The fields that will trigger the custom javascript
   */
  custom_javascript_triggering_fields?: string[] | null;
  /**
   * The form description
   */
  description: string;
  dynamic_field_config: {
    [k: string]: DynamicFieldConfigInput;
  };
  field_schema: JsonSchema;
  /**
   * The form ID
   */
  id: string;
  /**
   * Whether the form is reusable
   */
  is_reusable: boolean;
  /**
   * The form name
   */
  name: string;
  ui_schema?: ActionFormUISchemaDescription;
  /**
   * The date and time the form was last updated
   */
  updated_at: string;
}
export interface DynamicFieldConfigInput {
  endpoint_id: string;
  output_key?: string;
  payload_fields: {
    [k: string]:
      | ActionComponentDataExpression
      | ActionDataExpression
      | AgentDirectlyAssignedExpression
      | AgentRelatedToExpression
      | AggregateExpression
      | AndExpression
      | BinaryExpression
      | ClientOrganisationExpression
      | ColumnExpression
      | ExistsExpression
      | FormFieldExpression
      | LiteralExpression
      | NotExpression
      | OrExpression
      | PropertyExpression
      | TaskOwnerExpression;
  };
  selector_field?: string;
}
export interface ActionComponentDataExpression {
  component_key: string;
  is_metadata: boolean;
  output_key: string;
  type: string;
}
export interface ActionDataExpression {
  output_key: string;
  type: string;
}
export interface AgentDirectlyAssignedExpression {
  agent_id?: string;
  roles?: string[];
  type: string;
}
export interface AgentRelatedToExpression {
  agent_ids: string[] | null;
  roles?: string[];
  type: string;
}
export interface AggregateExpression {
  aggregate: string;
  column: string;
  type: string;
}
export interface AndExpression {
  operands:
    | (
        | ActionComponentDataExpression
        | ActionDataExpression
        | AgentDirectlyAssignedExpression
        | AgentRelatedToExpression
        | AggregateExpression
        | AndExpression
        | BinaryExpression
        | ClientOrganisationExpression
        | ColumnExpression
        | ExistsExpression
        | FormFieldExpression
        | LiteralExpression
        | NotExpression
        | OrExpression
        | PropertyExpression
        | TaskOwnerExpression
      )[]
    | null;
  type: string;
}
export interface BinaryExpression {
  left:
    | ActionComponentDataExpression
    | ActionDataExpression
    | AgentDirectlyAssignedExpression
    | AgentRelatedToExpression
    | AggregateExpression
    | AndExpression
    | BinaryExpression
    | ClientOrganisationExpression
    | ColumnExpression
    | ExistsExpression
    | FormFieldExpression
    | LiteralExpression
    | NotExpression
    | OrExpression
    | PropertyExpression
    | TaskOwnerExpression;
  operator: string;
  right:
    | ActionComponentDataExpression
    | ActionDataExpression
    | AgentDirectlyAssignedExpression
    | AgentRelatedToExpression
    | AggregateExpression
    | AndExpression
    | BinaryExpression
    | ClientOrganisationExpression
    | ColumnExpression
    | ExistsExpression
    | FormFieldExpression
    | LiteralExpression
    | NotExpression
    | OrExpression
    | PropertyExpression
    | TaskOwnerExpression;
  type: string;
}
export interface ClientOrganisationExpression {
  field: string;
  jsonPath: string[] | null;
  type: string;
}
export interface ColumnExpression {
  column: string;
  type: string;
}
export interface ExistsExpression {
  operand:
    | ActionComponentDataExpression
    | ActionDataExpression
    | AgentDirectlyAssignedExpression
    | AgentRelatedToExpression
    | AggregateExpression
    | AndExpression
    | BinaryExpression
    | ClientOrganisationExpression
    | ColumnExpression
    | ExistsExpression
    | FormFieldExpression
    | LiteralExpression
    | NotExpression
    | OrExpression
    | PropertyExpression
    | TaskOwnerExpression;
  type: string;
}
export interface FormFieldExpression {
  type: string;
  value: unknown;
}
export interface LiteralExpression {
  type: string;
  value: unknown;
}
export interface NotExpression {
  operand:
    | ActionComponentDataExpression
    | ActionDataExpression
    | AgentDirectlyAssignedExpression
    | AgentRelatedToExpression
    | AggregateExpression
    | AndExpression
    | BinaryExpression
    | ClientOrganisationExpression
    | ColumnExpression
    | ExistsExpression
    | FormFieldExpression
    | LiteralExpression
    | NotExpression
    | OrExpression
    | PropertyExpression
    | TaskOwnerExpression;
  type: string;
}
export interface OrExpression {
  operands:
    | (
        | ActionComponentDataExpression
        | ActionDataExpression
        | AgentDirectlyAssignedExpression
        | AgentRelatedToExpression
        | AggregateExpression
        | AndExpression
        | BinaryExpression
        | ClientOrganisationExpression
        | ColumnExpression
        | ExistsExpression
        | FormFieldExpression
        | LiteralExpression
        | NotExpression
        | OrExpression
        | PropertyExpression
        | TaskOwnerExpression
      )[]
    | null;
  type: string;
}
export interface PropertyExpression {
  jsonPath?: string[] | null;
  object: string;
  property: string;
  type: string;
}
export interface TaskOwnerExpression {
  component_key: string;
  property: string;
  task_type: string;
  type: string;
}
/**
 * The form schema, using jsonforms.io syntax
 */
export interface JsonSchema {
  additionalProperties: {
    [k: string]: unknown;
  };
  properties: {
    [k: string]: unknown;
  };
  required: unknown[] | null;
  type: string;
}
/**
 * The form UI schema
 */
export interface ActionFormUISchemaDescription {
  /**
   * The form UI schema elements. See jsonforms.io for more details
   */
  elements: unknown[] | null;
  /**
   * The type of the form UI schema
   */
  type: string;
}
export interface ActionBlueprintGraphNodeDescription {
  data: ActionBlueprintComponentDescription;
  /**
   * The id for the node (The id in this case is the component key)
   */
  id: string;
  position: Position;
  /**
   * The type of the node
   */
  type: "form" | "branch" | "trigger" | "configuration";
}
/**
 * The data for the node
 */
export interface ActionBlueprintComponentDescription {
  approval_auto_assign_config?: AutoAssignConfigInput;
  /**
   * Whether the component requires approval before it can be run
   */
  approval_required: boolean;
  /**
   * List of roles that are required to approve this component before it can be run
   */
  approval_roles: string[] | null;
  approval_scheduled_delay?: DurationInput;
  approval_sla_duration?: DurationInput1;
  /**
   * The name of the approval task to use for this component. If not provided, the task will be called 'Review: <Name>'
   */
  approval_task_name?: string;
  auto_assign_config?: AutoAssignConfigInput1;
  /**
   * The form / branch / trigger / configuration endpoint ID
   */
  component_id: string;
  /**
   * The component key for the component
   */
  component_key: string;
  /**
   * The component type enum, form | branch | trigger | configuration
   */
  component_type: "form" | "branch" | "trigger" | "configuration";
  /**
   * The configuration for how data is promoted to top level action data
   */
  data_promotion_config?: {
    [k: string]: string;
  };
  /**
   * Unique identifier for the action blueprint component
   */
  id: string;
  /**
   * For components that take inputs, this maps the input keys to the expression that will be used to extract the value at runtime
   */
  input_mapping: {
    [k: string]:
      | ActionComponentDataExpression
      | ActionDataExpression
      | AgentDirectlyAssignedExpression
      | AgentRelatedToExpression
      | AggregateExpression
      | AndExpression
      | BinaryExpression
      | ClientOrganisationExpression
      | ColumnExpression
      | ExistsExpression
      | FormFieldExpression
      | LiteralExpression
      | NotExpression
      | OrExpression
      | PropertyExpression
      | TaskOwnerExpression;
  };
  /**
   * Human-readable name of the action blueprint component
   */
  name: string;
  /**
   * List of roles that are permitted to run this component
   */
  permitted_roles: string[] | null;
  /**
   * List of component keys that must be completed before this component can be run
   */
  prerequisites: string[] | null;
  scheduled_delay?: DurationInput2;
  sla_duration?: DurationInput3;
  state_transition_rules?: StateTransitionRulesInput;
}
/**
 * Configuration for how the component should be auto-assigned to an agent when change status to pending_approval
 */
export interface AutoAssignConfigInput {
  /**
   * The field of the form to use for the auto-assign configuration (used for form_field_email)
   */
  form_field?: string;
  /**
   * The key of the form to use for the auto-assign configuration (used for form_field_email)
   */
  form_key?: string;
  /**
   * The type of auto-assign configuration to use
   */
  type: "client_org_role" | "primary_email" | "form_field_email";
  /**
   * The value to use for the auto-assign configuration (used for client_org_role and primary_email)
   */
  value?: string;
}
/**
 * The delay before the approval task is scheduled to run. If the calculated time falls on a weekend, it will be automatically moved to the next business day (Monday). Note that holidays are not considered.
 */
export interface DurationInput {
  /**
   * The number of units (minutes, hours, days) to wait
   */
  number: number;
  /**
   * The unit of time
   */
  unit: "minutes" | "hours" | "days";
}
/**
 * The SLA for the approval task. If the calculated deadline falls on a weekend, it will be automatically moved to the next business day (Monday). Note that holidays are not considered.
 */
export interface DurationInput1 {
  /**
   * The number of units (minutes, hours, days) to wait
   */
  number: number;
  /**
   * The unit of time
   */
  unit: "minutes" | "hours" | "days";
}
/**
 * Configuration for how the component should be auto-assigned to an agent
 */
export interface AutoAssignConfigInput1 {
  /**
   * The field of the form to use for the auto-assign configuration (used for form_field_email)
   */
  form_field?: string;
  /**
   * The key of the form to use for the auto-assign configuration (used for form_field_email)
   */
  form_key?: string;
  /**
   * The type of auto-assign configuration to use
   */
  type: "client_org_role" | "primary_email" | "form_field_email";
  /**
   * The value to use for the auto-assign configuration (used for client_org_role and primary_email)
   */
  value?: string;
}
/**
 * The delay before the component is scheduled to run. If the calculated time falls on a weekend, it will be automatically moved to the next business day (Monday). Note that holidays are not considered.
 */
export interface DurationInput2 {
  /**
   * The number of units (minutes, hours, days) to wait
   */
  number: number;
  /**
   * The unit of time
   */
  unit: "minutes" | "hours" | "days";
}
/**
 * The SLA for the component. If the calculated deadline falls on a weekend, it will be automatically moved to the next business day (Monday). Note that holidays are not considered.
 */
export interface DurationInput3 {
  /**
   * The number of units (minutes, hours, days) to wait
   */
  number: number;
  /**
   * The unit of time
   */
  unit: "minutes" | "hours" | "days";
}
/**
 * Configuration for automatic state transitions - e.g. a condition where a form approval can be skipped
 */
export interface StateTransitionRulesInput {
  /**
   * The expression that determines when the automatic state transition can execute. The expression should return a boolean value.
   */
  state_transition_rules_if:
    | ActionComponentDataExpression
    | ActionDataExpression
    | AgentDirectlyAssignedExpression
    | AgentRelatedToExpression
    | AggregateExpression
    | AndExpression
    | BinaryExpression
    | ClientOrganisationExpression
    | ColumnExpression
    | ExistsExpression
    | FormFieldExpression
    | LiteralExpression
    | NotExpression
    | OrExpression
    | PropertyExpression
    | TaskOwnerExpression;
  /**
   * The state this form should move to if the condition is true, once all fields are filled.
   */
  state_transition_rules_then: "pending_approval" | "complete";
}
/**
 * The position of the node
 */
export interface Position {
  x: number;
  y: number;
}
export interface TriggerEndpointDescription {
  /**
   * A URL to the JSON Schema for this object.
   */
  $schema?: string;
  /**
   * The creation time of the trigger endpoint
   */
  created_at: string;
  id: string;
  /**
   * The maximum number of retries for the endpoint
   */
  max_retries?: number;
  /**
   * The name of the trigger endpoint
   */
  name: string;
  /**
   * The output mapping for the endpoint
   */
  output_mapping: {
    [k: string]: string;
  };
  /**
   * The path of the endpoint; must start with a /
   */
  path_template: string;
  /**
   * The variables in the path template
   */
  path_template_variables: string[] | null;
  /**
   * The payload template for the endpoint
   */
  payload_template: {
    [k: string]: unknown;
  };
  /**
   * The variables in the payload template
   */
  payload_template_variables: string[] | null;
  /**
   * The query parameter template for the endpoint
   */
  query_parameter_template: {
    [k: string]: string;
  };
  /**
   * The variables in the query parameter template
   */
  query_parameter_template_variables: string[] | null;
  /**
   * The HTTP request method for the endpoint
   */
  request_method: "POST" | "PUT" | "GET" | "DELETE";
  /**
   * The timeout in seconds for requests to the trigger service
   */
  timeout_seconds?: number;
  /**
   * The trigger service ID
   */
  trigger_service_id: string;
  /**
   * The last update time of the trigger endpoint
   */
  updated_at: string;
}
